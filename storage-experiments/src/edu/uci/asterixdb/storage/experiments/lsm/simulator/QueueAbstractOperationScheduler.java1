/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.queue;

import java.io.PrintStream;
import java.text.DecimalFormat;

import org.apache.hyracks.storage.am.lsm.common.flowcontrol.DoubleUtil;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.ILSMFinalizingPagesEstimator;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.LSMFlowControlManager;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.FlowControlSpeedSolver;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.FlushOperation;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.FlushUnit;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.IOperationScheduler;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.ISpeedProvider;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.IoOperation;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.LatencyArray;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.MergeOperation;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.MergeUnit;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.OperationQueue;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.RandomVariable;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.SubOperation;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.Unit;
import org.apache.hyracks.storage.am.lsm.common.flowcontrol.simulator.FlowControlSpeedSolver.SimulateTerminateException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public abstract class QueueAbstractOperationScheduler implements IOperationScheduler {
    public static interface DataArrivalProcess {
        void reset();

        double arrive(double period, double time);
    }

    private static class IngestSubOperation extends SubOperation {

        public IngestSubOperation(int subOperationType, IOperationScheduler scheduler) {
            super(subOperationType, scheduler);
        }

        @Override
        public void initialize(double totalCapacity, double totalTime) {
            // no op
        }

        public void initializeIngest(double totalCapacity, double totalTime) {
            assert totalCapacity > 0;
            this.totalCapacity = totalCapacity;
            this.totalTime = totalTime;
            this.remainingTime = totalTime;
            this.active = true;
        }
    }

    public static class SimulateResult {
        public final double totalIngestedRecords;
        public final double totalProducedRecords;
        public final double meanLatency;
        public final double maxLatency;
        public final double maxQueueLength;

        public SimulateResult(double totalIngestedRecords, double totalProducedRecords, double meanLatency,
                double maxLatency, double maxQueueLength) {
            this.totalIngestedRecords = totalIngestedRecords;
            this.totalProducedRecords = totalProducedRecords;
            this.meanLatency = meanLatency;
            this.maxLatency = maxLatency;
            this.maxQueueLength = maxQueueLength;
        }

    }

    protected static final Logger LOGGER = LogManager.getLogger(QueueAbstractOperationScheduler.class);

    public static boolean VERBOSE = false;

    protected int numRunningOperations = 0;

    protected final int toleratedComponentsPerLevel;
    protected final int numLevels;

    protected final RandomVariable memoryComponentCapacity;
    protected RandomVariable memoryComponentFillUpTime;
    protected final int totalMemoryComponents;
    protected final int sizeRatio;
    protected final ISpeedProvider flushSpeed;
    protected final ISpeedProvider[] mergeSpeeds;
    protected final ILSMFinalizingPagesEstimator pageEstimator;

    protected final double subOperationProcessingRecords;
    protected final double subOperationPages;
    protected final double baseLevelCapacity;

    protected final FlushUnit flushUnit;
    protected final MergeUnit[] mergeUnits;
    protected FlushOperation flushOperation;
    protected final MergeOperation[] mergeOperations;

    protected final OperationQueue opQueue = new OperationQueue();

    protected final SubOperation[] newSubOperations;
    protected int numNewSubOperations = 0;

    protected final IoOperation[] newIoOperations;
    protected int numNewIoOperations = 0;

    protected final SubOperation dataArrivalOp = new SubOperation(INGEST_DATA_ARRIVAL_OP, this);
    protected final IngestSubOperation ingestOp = new IngestSubOperation(INGEST_SUB_OP, this);
    protected static final int INGEST_DATA_ARRIVAL_OP = -1;
    protected static final int INGEST_SUB_OP = 0;
    protected static final int FLUSH_SUB_OP = 1;
    protected static final int MERGE_SUB_OP_START = 2;

    protected static final int QUEUE_SIZE = 3600;

    protected final double[] timeQueue;
    protected final double[] dataQueue;
    protected double remainingData = 0;
    protected double maxRemainingData = 0;
    protected int dataArrivalQueuePos = 0;
    protected int dataConsumptionQueuePos = 0;
    protected int queueLength = 0;

    protected final LatencyArray processingLatencies;

    protected final double dataArrivalPeriod;
    protected final DataArrivalProcess dataArrivalProcess;

    protected double time;
    protected double lastIngestedData;
    protected double ingestedData;
    protected double maxIngestSpeed;

    protected final PrintStream out = System.out;

    public static SimulateResult Result;

    public QueueAbstractOperationScheduler(int toleratedComponentsPerLevel, int numLevels,
            RandomVariable memoryComponentCapacity, int totalMemoryComponents, int sizeRatio, ISpeedProvider flushSpeed,
            ISpeedProvider[] mergeSpeeds, ILSMFinalizingPagesEstimator pageEstimator,
            double subOperationProcessingRecords, double subOperationPages, double baseLevelCapacity,
            double dataArrivalPeriod, DataArrivalProcess dataArrivalProcess, int latencyPrecision) {
        this.toleratedComponentsPerLevel = toleratedComponentsPerLevel;
        this.numLevels = numLevels;
        this.memoryComponentCapacity = memoryComponentCapacity;
        this.totalMemoryComponents = totalMemoryComponents;
        this.sizeRatio = sizeRatio;
        this.flushSpeed = flushSpeed;
        this.mergeSpeeds = mergeSpeeds;
        this.pageEstimator = pageEstimator;
        this.subOperationProcessingRecords = subOperationProcessingRecords;
        this.subOperationPages = subOperationPages;
        this.baseLevelCapacity = baseLevelCapacity;

        this.flushUnit = new FlushUnit(totalMemoryComponents, memoryComponentCapacity, ingestOp);
        this.flushOperation = new FlushOperation(0, new SubOperation(FLUSH_SUB_OP, this), this, flushSpeed);
        this.mergeUnits = new MergeUnit[numLevels];
        this.mergeOperations = new MergeOperation[numLevels];
        double maxCapacity = baseLevelCapacity;
        for (int i = 0; i < mergeUnits.length; i++) {
            mergeUnits[i] = new MergeUnit(i, getMaxNumComponentsPerLevel(), maxCapacity);
            mergeOperations[i] =
                    new MergeOperation(i, 0, new SubOperation(i + MERGE_SUB_OP_START, this), this, mergeSpeeds[i]);
            maxCapacity *= sizeRatio;
        }

        this.newSubOperations = new SubOperation[numLevels + 2];
        this.newIoOperations = new IoOperation[numLevels + 2];

        this.dataArrivalPeriod = dataArrivalPeriod;
        this.dataArrivalProcess = dataArrivalProcess;
        this.timeQueue = new double[(int) (dataArrivalPeriod * QUEUE_SIZE)];
        this.dataQueue = new double[(int) (dataArrivalPeriod * QUEUE_SIZE)];

        this.processingLatencies = new LatencyArray(latencyPrecision);
    }

    /**
     * @param speed
     * @return whether blocking occurs
     */
    public boolean simulate(double speed, double maxTime) {
        if (numLevels == 0) {
            return false;
        }
        // continuous time in seconds
        time = 0;
        maxIngestSpeed = speed;
        boolean stalled = false;
        SimulateTerminateException exception = null;
        if (flushUnit.isFull()) {
            // already stalled
            stalled = true;
            if (LSMFlowControlManager.VERBOSE) {
                LOGGER.error("speed {} stops after time {}, stalled: {}", speed, time, true);
            }
            return true;
        }
        try {
            while (true) {
                SubOperation top = opQueue.peek();
                double duration = top.remainingTime;
                assert duration >= 0 && !Double.isNaN(duration);
                time += duration;

                int size = opQueue.size();
                top.remainingTime = 0;
                assert top.isCompleted();
                for (int i = 1; i < size; i++) {
                    SubOperation op = opQueue.get(i);
                    op.remainingTime -= duration;
                    assert op.remainingTime >= 0;
                }

                completeSubOperation(top);
                for (int i = 0; i < numNewIoOperations; i++) {
                    // start progress new io operations
                    newIoOperations[i].initializeNewSubOperation();
                }
                numNewIoOperations = 0;
                if (numNewSubOperations > 0) {
                    opQueue.replaceTop(newSubOperations[0]);
                    for (int i = 1; i < numNewSubOperations; i++) {
                        opQueue.add(newSubOperations[i]);
                    }
                    numNewSubOperations = 0;
                } else {
                    opQueue.removeTop();
                }

                if (time > maxTime) {
                    break;
                }
            }
        } catch (SimulateTerminateException e) {
            exception = e;
        }
        if (LSMFlowControlManager.VERBOSE) {
            LOGGER.error("speed {} stops after time {}, stalled: {}, level: {}, numEffectiveLevels: {}", speed, time,
                    stalled, exception != null ? exception.level : "?", numLevels);
        }
        if (VERBOSE) {
            System.out.println("total ingested data: " + ingestedData);
            System.out.println("total produced data: " + (ingestedData + remainingData));
            System.out.println(
                    "mean latency: " + processingLatencies.getTotalLatency() / processingLatencies.getTotalCount());
            System.out.println("max queue size: " + maxRemainingData);
            System.out.println("End-to-end latencies");
            DecimalFormat latencyFormat = new DecimalFormat("#0.00");
            DecimalFormat percentFormat = new DecimalFormat("#0.000");
            processingLatencies.forEach((latency, count) -> {
                System.out.println(latencyFormat.format(latency) + "\t"
                        + percentFormat.format((double) count / ingestedData * 100));
                return null;
            });
        }
        Result = new SimulateResult(ingestedData, ingestedData + remainingData,
                processingLatencies.getTotalLatency() / processingLatencies.getTotalCount(),
                processingLatencies.getMaxLatency(), maxRemainingData);
        return stalled;
    }

    protected void consumeData() {
        assert !flushUnit.isFull();
        assert queueLength > 0;
        assert !ingestOp.active || ingestOp.isCompleted();
        // schedule new sub operation
        double capacity = Math.min(dataQueue[dataConsumptionQueuePos],
                flushUnit.maxCapacities[flushUnit.currentComponentIndex] - flushUnit.currentCapacity);
        assert capacity > 0;
        ingestOp.initializeIngest(capacity, capacity / maxIngestSpeed);
        addNewSubOperation(ingestOp);
    }

    protected void completeSubOperation(SubOperation subOp) {
        switch (subOp.subOperationType) {
            case INGEST_DATA_ARRIVAL_OP:
                // consume data
                double data = dataArrivalProcess.arrive(dataArrivalPeriod, time);
                assert queueLength < QUEUE_SIZE : "queue overflow";
                timeQueue[dataArrivalQueuePos] = time;
                dataQueue[dataArrivalQueuePos] = data;
                remainingData += data;
                dataArrivalQueuePos = (dataArrivalQueuePos + 1) % QUEUE_SIZE;
                queueLength++;

                maxRemainingData = Double.max(maxRemainingData, remainingData);
                if (!ingestOp.active && !flushUnit.isFull()) {
                    consumeData();
                }
                // schedule new data arrival operation
                dataArrivalOp.initialize(1, dataArrivalPeriod);
                // print time, data arrival, data consumption
                double ingestedLastPeriod = ingestedData - lastIngestedData;
                lastIngestedData = ingestedData;
                if (ingestOp.active) {
                    double ongoingIngested = (ingestOp.totalCapacity * (ingestOp.totalTime - ingestOp.remainingTime)
                            / ingestOp.totalTime);
                    ingestedLastPeriod += ongoingIngested;
                    lastIngestedData += ongoingIngested;
                }
                if (VERBOSE) {
                    out.println(String.format("%.1f\t%.1f\t%.1f", time, data, ingestedLastPeriod));
                }
                break;
            case INGEST_SUB_OP:
                this.ingestedData += subOp.totalCapacity;
                remainingData -= subOp.totalCapacity;
                assert DoubleUtil.greaterThan(remainingData, 0) || DoubleUtil.equals(remainingData, 0);
                flushUnit.currentCapacity += subOp.totalCapacity;
                dataQueue[dataConsumptionQueuePos] -= subOp.totalCapacity;
                processingLatencies.add(time - timeQueue[dataConsumptionQueuePos], (int) subOp.totalCapacity);
                if (dataQueue[dataConsumptionQueuePos] <= 0) {
                    dataConsumptionQueuePos = (dataConsumptionQueuePos + 1) % QUEUE_SIZE;
                    queueLength--;
                }
                if (flushUnit.currentCapacity >= flushUnit.maxCapacities[flushUnit.currentComponentIndex]) {
                    flushUnit.setMemoryComponentFull();
                }
                if (!flushUnit.isFull() && queueLength > 0) {
                    consumeData();
                } else {
                    ingestOp.reset();
                }
                if (isFlushable(flushUnit)) {
                    scheduleFlushOperation(flushUnit);
                }
                break;
            case FLUSH_SUB_OP:
                // flush completed
                if (flushUnit.operation.completeSubOperation()) {
                    completeFlushOperation(flushUnit);
                    if (!flushUnit.isFull() && !ingestOp.active && queueLength > 0) {
                        consumeData();
                    }
                } else {
                    flushUnit.operation.initializeNewSubOperation();
                }
                break;
            default:
                int level = subOp.subOperationType - MERGE_SUB_OP_START;
                if (mergeUnits[level].operation.completeSubOperation()) {
                    completeMergeOperation(mergeUnits[level]);
                } else {
                    mergeUnits[level].operation.initializeNewSubOperation();
                }
                break;
        }
    }

    protected boolean isFlushable(FlushUnit flushUnit) {
        return !flushUnit.blocked && flushUnit.operation == null && flushUnit.numUsedCurrentComponents > 0;
    }

    protected void operationCompleted() {
        numRunningOperations--;
        assert numRunningOperations >= 0;
    }

    protected void operationScheduled() {
        numRunningOperations++;
        assert numRunningOperations >= 0;
    }

    public void scheduleFlushOperation(FlushUnit flushUnit) {
        assert !flushUnit.blocked;
        assert flushUnit.operation == null;
        operationScheduled();
        IoOperation flushOp = initializeFlushOperation(flushUnit.maxCapacities[flushUnit.currentFlushIndex]);
        flushUnit.operation = flushOp;
        addNewIoOperation(flushOp);
    }

    public void completeFlushOperation(FlushUnit flushUnit) {
        FlushOperation flushOp = flushUnit.getOperation();
        if (flushOp.isCompleted) {
            return;
        }
        flushOp.setCompleted();
        operationCompleted();
        assert numRunningOperations >= 0;
        if (addToMergeUnit(mergeUnits[0], flushOp.totalCapacity, flushUnit)) {
            finalizeFlushOperation(flushUnit);
        }
    }

    protected void finalizeFlushOperation(FlushUnit flushUnit) {
        if (flushUnit.numUsedCurrentComponents == flushUnit.maxCapacities.length) {
            // we need to active a new component
            flushUnit.activeNextMemoryComponent();
        } else {
            flushUnit.maxCapacities[flushUnit.currentFlushIndex] = 0;
        }
        flushUnit.numUsedCurrentComponents--;
        flushUnit.currentFlushIndex = (flushUnit.currentFlushIndex + 1) % flushUnit.maxCapacities.length;
        flushUnit.operation = null;
        if (isFlushable(flushUnit)) {
            scheduleFlushOperation(flushUnit);
        }
    }

    protected boolean addToMergeUnit(MergeUnit mergeUnit, double capacity, Unit sourceUnit) {
        if (mergeUnit.isFull()) {
            mergeUnit.setBlockedUnit(sourceUnit);
            return false;
        } else {
            mergeUnit.addComponent(capacity);
            if (isMergeable(mergeUnit)) {
                scheduleMergeOperation(mergeUnit);
            }
            return true;
        }
    }

    public void scheduleMergeOperation(MergeUnit mergeUnit) {
        assert !mergeUnit.blocked;
        checkMergeFeasibility(mergeUnit.level);
        operationScheduled();
        MergeOperation mergeOp = initializeMergeOperation(mergeUnit.level, mergeUnit.components);
        mergeUnit.operation = mergeOp;
        addNewIoOperation(mergeOp);

        //        System.out.println(String.format("%.0f: Schedule merge %s in level %d. operations %d", time,
        //                Arrays.toString(mergeUnit.components), mergeUnit.level, numRunningOperations));
    }

    public void addNewSubOperation(SubOperation subOp) {
        newSubOperations[numNewSubOperations++] = subOp;
    }

    public void addNewIoOperation(IoOperation ioOp) {
        try {
            newIoOperations[numNewIoOperations++] = ioOp;
        } catch (IndexOutOfBoundsException e) {
            throw e;
        }
    }

    public void initialize(double ingestSpeed, double[] memoryComponentCapacities,
            double currentMemoryComponentCapacity, double flushedCapacity, double flusheFinalizedPages,
            double flushSubOperationElapsedTime, double[][] mergeComponents, double[] mergedCapacities,
            double[] mergeFinalizedPages, double[] mergeSubOperationElapsedTimes) {
        opQueue.clear();
        numRunningOperations = 0;
        numNewIoOperations = 0;
        numNewSubOperations = 0;

        flushUnit.initialize(memoryComponentCapacities, currentMemoryComponentCapacity, ingestSpeed);
        if (isFlushable(flushUnit)) {
            scheduleFlushOperation(flushUnit);
            flushUnit.operation.initialize(flushedCapacity, flusheFinalizedPages);
        }
        for (int i = 0; i < mergeUnits.length; i++) {
            mergeUnits[i].initialize(mergeComponents[i]);
            if (isMergeable(mergeUnits[i])) {
                scheduleMergeOperation(mergeUnits[i]);
                mergeUnits[i].operation.initialize(mergedCapacities[i], mergeFinalizedPages[i]);
            }
        }

        numNewIoOperations = 0;
        numNewSubOperations = 0;

        // activate sub operations
        if (flushUnit.operation != null) {
            if (!flushUnit.operation.finishedProcessing()) {
                flushUnit.operation.initializeNewSubOperation();
                flushUnit.operation.subOperation.remainingTime -= flushSubOperationElapsedTime;
            }
        }

        for (int i = 0; i < mergeUnits.length; i++) {
            MergeOperation mergeOp = mergeUnits[i].getOperation();
            if (mergeOp != null && !mergeOp.finishedProcessing()) {
                mergeOp.initializeNewSubOperation();
                mergeOp.subOperation.remainingTime -= mergeSubOperationElapsedTimes[i];
            }
        }

        numNewIoOperations = 0;
        numNewSubOperations = 0;
        // examine flush/merge operations have completed or not
        // activate sub operations
        if (flushUnit.operation != null) {
            FlushOperation flushOp = flushUnit.getOperation();
            if (!flushOp.finishedProcessing()) {
                if (flushOp.subOperation.active) {
                    if (flushOp.subOperation.isCompleted()) {
                        boolean flushCompleted = flushOp.completeSubOperation();
                        if (flushCompleted) {
                            completeFlushOperation(flushUnit);
                        } else {
                            addNewIoOperation(flushOp);
                        }
                    } else {
                        // current op is still active
                        opQueue.add(flushOp.subOperation);
                    }
                }
            } else {
                completeFlushOperation(flushUnit);
            }
        }

        for (int i = 0; i < mergeUnits.length; i++) {
            MergeOperation mergeOp = mergeUnits[i].getOperation();
            if (mergeOp == null) {
                continue;
            }

            if (!mergeOp.finishedProcessing()) {
                if (mergeOp.subOperation.active) {
                    if (mergeOp.subOperation.isCompleted()) {
                        boolean mergeCompleted = mergeOp.completeSubOperation();
                        if (mergeCompleted) {
                            completeMergeOperation(mergeUnits[i]);
                        } else {
                            addNewIoOperation(mergeOp);
                        }
                    } else {
                        // current op is still active
                        opQueue.add(mergeOp.subOperation);
                    }
                }
            } else {
                completeMergeOperation(mergeUnits[i]);
            }

        }
        numNewSubOperations = 0;
        for (int i = 0; i < numNewIoOperations; i++) {
            // activate newly scheduled io operations
            newIoOperations[i].initializeNewSubOperation();
        }
        numNewIoOperations = 0;
        for (int i = 0; i < numNewSubOperations; i++) {
            opQueue.add(newSubOperations[i]);
        }
        numNewSubOperations = 0;

        dataArrivalProcess.reset();
        dataArrivalOp.initialize(1, dataArrivalPeriod);
        opQueue.add(dataArrivalOp);
        numNewSubOperations = 0;
    }

    protected void checkMergeFeasibility(int level) {
        if (level >= numLevels) {
            throw new SimulateTerminateException(level);
        }
    }

    protected FlushOperation initializeFlushOperation(double totalCapacity) {
        flushOperation.reset(totalCapacity, pageEstimator.estiamtePages(totalCapacity));
        return flushOperation;
    }

    protected abstract MergeOperation initializeMergeOperation(int level, double[] capacities);

    protected abstract int getMaxNumComponentsPerLevel();

    protected abstract boolean isMergeable(MergeUnit unit);

    protected abstract void completeMergeOperation(MergeUnit unit);

    public double getSubOperationPages() {
        return subOperationPages;
    }

    public double getSubOperationProcessingRecords() {
        return subOperationProcessingRecords;
    }

    public int getNumRunningOperations() {
        return numRunningOperations;
    }

}
